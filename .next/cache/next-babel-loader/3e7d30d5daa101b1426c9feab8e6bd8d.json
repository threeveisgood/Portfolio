{"ast":null,"code":"import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport withApollo from \"next-with-apollo\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nconst GRAPHQL_URL = process.env.BACKEND_URL || \"http://localhost:1337/graphql\";\nconst link = createHttpLink({\n  fetch,\n  // Switches between unfetch & node-fetch for client & server.\n  uri: GRAPHQL_URL\n});\nexport default withApollo( // You can get headers and ctx (context) from the callback params\n// e.g. ({ headers, ctx, initialState })\n({\n  initialState\n}) => new ApolloClient({\n  link: link,\n  cache: new InMemoryCache() //  rehydrate the cache using the initial data passed from the server:\n  .restore(initialState || {})\n}));","map":{"version":3,"sources":["E:/Coding/next-materialui/utils/apollo.js"],"names":["ApolloClient","InMemoryCache","withApollo","createHttpLink","fetch","GRAPHQL_URL","process","env","BACKEND_URL","link","uri","initialState","cache","restore"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAZ,IAA2B,+BAA/C;AAEA,MAAMC,IAAI,GAAGN,cAAc,CAAC;AACxBC,EAAAA,KADwB;AACjB;AACPM,EAAAA,GAAG,EAAEL;AAFmB,CAAD,CAA3B;AAKE,eAAeH,UAAU,EACvB;AACA;AACA,CAAC;AAAES,EAAAA;AAAF,CAAD,KACE,IAAIX,YAAJ,CAAiB;AACfS,EAAAA,IAAI,EAAEA,IADS;AAEfG,EAAAA,KAAK,EAAE,IAAIX,aAAJ,GACL;AADK,GAEJY,OAFI,CAEIF,YAAY,IAAI,EAFpB;AAFQ,CAAjB,CAJqB,CAAzB","sourcesContent":["import { ApolloClient } from \"apollo-client\";  \r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";  \r\nimport withApollo from \"next-with-apollo\";  \r\nimport { createHttpLink } from \"apollo-link-http\";  \r\nimport fetch from \"isomorphic-unfetch\";\r\n\r\nconst GRAPHQL_URL = process.env.BACKEND_URL || \"http://localhost:1337/graphql\";\r\n\r\nconst link = createHttpLink({  \r\n    fetch, // Switches between unfetch & node-fetch for client & server.\r\n    uri: GRAPHQL_URL\r\n  });\r\n\r\n  export default withApollo(  \r\n    // You can get headers and ctx (context) from the callback params\r\n    // e.g. ({ headers, ctx, initialState })\r\n    ({ initialState }) =>\r\n      new ApolloClient({\r\n        link: link,\r\n        cache: new InMemoryCache()\r\n          //  rehydrate the cache using the initial data passed from the server:\r\n          .restore(initialState || {})\r\n      })\r\n  );"]},"metadata":{},"sourceType":"module"}